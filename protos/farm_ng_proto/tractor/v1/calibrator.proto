syntax = "proto3";

import "farm_ng_proto/tractor/v1/geometry.proto";
import "farm_ng_proto/tractor/v1/apriltag.proto";
import "farm_ng_proto/tractor/v1/image.proto";
import "farm_ng_proto/tractor/v1/resource.proto";

package farm_ng_proto.tractor.v1;
option go_package = "github.com/farm_ng/genproto";

// Commands that the calibrator process listens to.
message CalibratorCommand {
  // This finishes (runs the solver) calibration if it is currently running and
  // puts the process into a more or less idle state.
  message Solve {
  }

  // TODO Solve command for incremental solutions while capturing.

  // Start rigid apriltag rig calibration, and listening to ApriltagDetections
  // messages that are sent to "calibrator/*" and accumulating the detections
  // until Stop is received.
  message ApriltagRigStart {
    // The tag ids to consider rigid, all other tag detections will be ignored.
    repeated int32 tag_ids = 1;
  }

  // This oneof is parsed via switch statement inside the calibration process to
  // determine what action to take.
  oneof command {
    Solve solve = 3;
    ApriltagRigStart apriltag_rig_start = 2;
  }
}

// The solver status, relatively generic and used to denote if a model is just
// an initialization, has been solved and converged, or if the solver failed.
enum SolverStatus {
  SOLVER_STATUS_UNSPECIFIED = 0;
  SOLVER_STATUS_INITIAL = 1;
  SOLVER_STATUS_CONVERGED = 2;
  SOLVER_STATUS_FAILED = 3;
}

// Per tag statistics generated by the solver, which can be used for determining
// the quality of the rig solution.
message ApriltagRigTagStats {
  // Which april tag id does this refer to in the rig.
  int32 tag_id = 1;
  // How many frames was this tag observed in the dataset.
  int32 n_frames = 2;
  // The tag's RMSE (sqrt(mean(reprojection_error**2))) over the entire rig
  // calibration dataset.
  double tag_rig_rmse = 3;
  // Per image RMSE of this tag.  The keys to this map are the index into the
  // repeated detections in the parent rig model.
  // If an RMSE is high on a particular image, it may be an outlier and this
  // granular information can be used for debugging issues in the calibration
  // data.
  map<int32, double> per_image_rmse = 4;
}

// A monocular dataset and model used for estimating the parameters of an
// ApriltagRig. This assumes a single camera with a fixed lense was used to
// capture a set of images and apriltag detections.
// This datastructure is produced by the calibration solver, and could be used
// to resolve the calibration if required.
message MonocularApriltagRigModel {
  // Solved for rig, this bit is reusable for tracking or downstream
  // calibration.
  ApriltagRig rig = 1;
  // Is this the initial rig, or did the solver converge, fail...
  // For diagnosis of failures or unexpected results its useful to look at the
  // initialization first.
  SolverStatus solver_status = 2;
  // The total rig RMSE of all tags from all images.
  double rmse = 3;
  // Per tag statistics, can be used to
  repeated ApriltagRigTagStats tag_stats = 4;

  // The camera frame name, used in NamedSE3Poses.
  string camera_frame_name = 5;
  // The ApriltagDetections that are used to initialize and solve the
  // rig. For debugging purposes, these typically have the image resources
  // associated with them.  The tag_stats.per_image_rmse keys refer to the
  // elements of this collection.
  repeated ApriltagDetections detections = 6;

  // The solver also estimates the pose of each of the camera views in
  // detections to the the rig.  This is may not be the same length of
  // detections, for example if the detections had outliers or not enough
  // detections to estimate the pose, but the frame names
  // <camera_frame_name>/<detections_index %05d> encode
  // encode which index in detections these refer to.
  repeated NamedSE3Pose camera_poses_rig = 7;

  // Each image where we are able to estimate a pose has a projection debug
  // image, which shows the detected points, and the reprojected corners of the
  // rig.
  repeated Image reprojection_images = 8;
}

// The status message produced by the Calibration process.
message CalibratorStatus {
  // Sent periodically, when ever a new frame is added, and once after the Stop
  // command and the solver has run.
  message ApriltagRigProgress {
    int32 num_frames = 1;
    // The rig model saved to disk.
    // Will be a json encoded protobuf with type MonocularApriltagRigModel.
    Resource rig_model_resource = 3;
    bool finished = 4;
  }

  oneof status {
    ApriltagRigProgress apriltag_rig = 1;
  }
}
