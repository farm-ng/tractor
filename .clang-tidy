---
# Configure clang-tidy for this project.
# Forked from https://github.com/googleapis/google-cloud-cpp/blob/master/.clang-tidy

# Here is an explanation for why some of the checks are disabled:
#
#  -modernize-use-trailing-return-type: clang-tidy recommends using
#      `auto Foo() -> std::string { return ...; }`, we think the code is less
#      readable in this form.
#
# - All others are provisionally disabled, and should be re-enabled or documented as disabled
Checks: >
  -*,
  bugprone-*,
  clang-diagnostic-*,
  google-*,
  misc-*,
  modernize-*,
  performance-*,
  portability-*,
  readability-*
  -bugprone-branch-clone,
  -bugprone-integer-division,
  -bugprone-narrowing-conversions,
  -clang-diagnostic-unused-local-typedef,
  -google-build-using-namespace,
  -google-default-arguments,
  -google-explicit-constructor,
  -google-readability-avoid-underscore-in-googletest-name,
  -google-readability-casting,
  -google-readability-todo,
  -google-runtime-int,
  -google-runtime-references,
  -misc-non-private-member-variables-in-classes,
  -misc-unused-parameters,
  -misc-unused-using-decls,
  -modernize-avoid-bind,
  -modernize-avoid-c-arrays,,
  -modernize-loop-convert,
  -modernize-make-unique,
  -modernize-pass-by-value,
  -modernize-use-auto,
  -modernize-use-bool-literals,
  -modernize-use-default-member-init,
  -modernize-use-equals-default,
  -modernize-use-nodiscard,
  -modernize-use-override,
  -modernize-use-trailing-return-type,
  -modernize-use-using,
  -performance-for-range-copy,
  -performance-unnecessary-value-param,
  -readability-const-return-type,
  -readability-container-size-empty,
  -readability-convert-member-functions-to-static,
  -readability-else-after-return,
  -readability-identifier-naming,
  -readability-implicit-bool-conversion,
  -readability-inconsistent-declaration-parameter-name,
  -readability-isolate-declaration,
  -readability-magic-numbers,
  -readability-make-member-function-const,
  -readability-qualified-auto,
  -readability-uppercase-literal-suffix

# Turn all the warnings from the checks above into errors.
WarningsAsErrors: "*"

# Scan all non-system headers too
HeaderFilterRegex: "-header-filter=.*"

# TODO(isherman|ethanrublee): Discuss FunctionCase
CheckOptions:
  - { key: readability-identifier-naming.NamespaceCase,          value: lower_case }
  - { key: readability-identifier-naming.ClassCase,              value: CamelCase  }
  - { key: readability-identifier-naming.StructCase,             value: CamelCase  }
  - { key: readability-identifier-naming.TemplateParameterCase,  value: CamelCase  }
  - { key: readability-identifier-naming.FunctionCase,           value: aNy_CasE   }
  - { key: readability-identifier-naming.VariableCase,           value: lower_case }
  - { key: readability-identifier-naming.ClassMemberCase,        value: lower_case }
  - { key: readability-identifier-naming.ClassMemberSuffix,      value: _          }
  - { key: readability-identifier-naming.PrivateMemberSuffix,    value: _          }
  - { key: readability-identifier-naming.ProtectedMemberSuffix,  value: _          }
  - { key: readability-identifier-naming.EnumConstantCase,         value: CamelCase }
  - { key: readability-identifier-naming.EnumConstantPrefix,       value: k         }
  - { key: readability-identifier-naming.ConstexprVariableCase,    value: CamelCase }
  - { key: readability-identifier-naming.ConstexprVariablePrefix,  value: k         }
  - { key: readability-identifier-naming.GlobalConstantCase,       value: CamelCase }
  - { key: readability-identifier-naming.GlobalConstantPrefix,     value: k         }
  - { key: readability-identifier-naming.MemberConstantCase,       value: CamelCase }
  - { key: readability-identifier-naming.MemberConstantPrefix,     value: k         }
  - { key: readability-identifier-naming.StaticConstantCase,       value: CamelCase }
  - { key: readability-identifier-naming.StaticConstantPrefix,     value: k         }
  - { key: readability-implicit-bool-conversion.AllowIntegerConditions,  value: 1   }
  - { key: readability-implicit-bool-conversion.AllowPointerConditions,  value: 1   }
